// Camera Sharing v0.3
// Original written by Adeon Writer and idea by Sylvie Link
// This script is open source. Wall of Text here:
// http://www.opensource.org/licenses/gpl-3.0.html

// Script name: "2.) Track their Camera"
// This script goes into a prim along with the script called "1.) Request Camera Data"
// Once both scripts are in the same prim, wear it.

custom_camera(vector pos, vector look)
{
    llSetCameraParams([CAMERA_ACTIVE, 1, CAMERA_FOCUS, look, CAMERA_FOCUS_LOCKED, TRUE, CAMERA_POSITION, pos, CAMERA_POSITION_LOCKED, TRUE]);
}

default
{
    on_rez(integer start)
    {
        llResetScript();
    }
    
    state_entry()
    {
        
        if(llGetAttached() == 0) // Rezzed, not worn
        {
            llSetTexture(TEXTURE_BLANK, ALL_SIDES);
            llSetAlpha(1, ALL_SIDES);
            llOwnerSay("Sorry, SecondLife only supports camera control for worn objects. To use Camera Sharing, delete this and wear it instead.");
        }
        else
        {
            llSetTexture(TEXTURE_TRANSPARENT, ALL_SIDES);
            llSetAlpha(0, ALL_SIDES);
            llRequestPermissions(llGetOwner(), PERMISSION_CONTROL_CAMERA);
        }
    }
    
    run_time_permissions(integer perm)
    {
        if(perm & PERMISSION_CONTROL_CAMERA)
        {
            llClearCameraParams();
            llReleaseCamera(llGetOwner());
            state grantedPermissions;
        }
    }
}

state grantedPermissions
{
    on_rez(integer start)
    {
        llResetScript();
    }
    
    link_message(integer link, integer num, string str, key id)
    {
        custom_camera((vector)str, (vector)((string)id));
    }
    
    attach(key id)
    {
        if(id==NULL_KEY)
        {
            llClearCameraParams();
            llReleaseCamera(llGetOwner());
        }
    }
}